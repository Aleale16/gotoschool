package main

import (
	"bytes"
	"encoding/gob"
	"fmt"
)

type Data struct {  

    //ID int `json:"ID"`
    ID int `json:"-"`
    Name string `json:"name,omitempty"`
    Company string `json:"company,omitempty"`


}

type GetData struct {
    Name    string
}



func main() {
   /* foo := []Data{
        {
            ID:   10,
            Name: "John Doe",
        },
        {
            Name:    "Вася",
            Company: "Яндекс",
        },
    }*/
  /*  out, err := json.Marshal(foo)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(string(out))*/

  /*  err := json.Unmarshal([]byte(`[0, 10, 30]`), &v)
fmt.Printf("%T, %[1]v, %v", v, err) */

    // data содержит данные в формате gob
    data := []byte{12, 255, 129, 2, 1, 2, 255, 130, 0, 1, 12,
        0, 0, 17, 255, 130, 0, 2, 6, 72, 101, 108, 108,
        111, 44, 5, 119, 111, 114, 108, 100}
    // напишите код, который декодирует data в массив строк
    // 1) создайте буфер `bytes.NewBuffer(data)` для передачи в декодер
    buf := bytes.NewBuffer(data)
    // 2) создайте декодер gob.NewDecoder(buf)
    dec := gob.NewDecoder(buf)
    // 3) определите `make([]string, 0)` для получения декодированного слайса
   decoder := make([]string, 0)
    // 4) декодируйте данные функцией `dec.Decode`
    if err := dec.Decode(&decoder); err != nil {
        panic(err)
    }
    //dec.Decode(&decoder)
    fmt.Println(decoder)
} 