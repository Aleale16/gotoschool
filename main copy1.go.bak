package main

import (
	"io"
	"log"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
)

var cars = map[string]string{
    "id1": "Renault",
    "id2": "BMW",
    "id3": "VW",
    "id4": "Audi",
}

func main() {
/*    // определяем хендлер, который выводит все машины
    http.HandleFunc("/cars", func(rw http.ResponseWriter, r *http.Request) {
        carsList := carsListFunc()
        _, err := io.WriteString(rw, strings.Join(carsList, ","))
        if err != nil {
            panic(err)
        }
    })

    // определяем хендлер, который выводит определённую машину
    http.HandleFunc("/car", func(rw http.ResponseWriter, r *http.Request) {
        carID := r.URL.Query().Get("id")
        if carID == "" {
            http.Error(rw, "carID param is missed", http.StatusBadRequest)
            return
        }
        rw.Write([]byte(carFunc(carID)))
    })

    log.Fatal(http.ListenAndServe(":8080", nil))
    */
        // определяем роутер chi
        r := chi.NewRouter()

        // зададим встроенные middleware, чтобы улучшить стабильность приложения
        r.Use(middleware.RequestID)
        r.Use(middleware.RealIP)
        r.Use(middleware.Logger)
        r.Use(middleware.Recoverer)
    
        // так как роутер chi совместим с библиотекой chi, переписывать код для него не нужно
        r.Get("/cars", func(rw http.ResponseWriter, r *http.Request) {
            carsList := carsListFunc()
            _, err := io.WriteString(rw, strings.Join(carsList, ","))
            if err != nil {
                panic(err)
            }
        })
    
        // единственное изменение здесь: параметр задан напрямую в строке URL
        r.Get("/car/{carID}", func(rw http.ResponseWriter, r *http.Request) {
            carID := chi.URLParam(r, "carID")
            if carID == "" {
                http.Error(rw, "carID param is missed", http.StatusBadRequest)
                return
            }
            rw.Write([]byte(carFunc(carID)))
        })
    
        log.Fatal(http.ListenAndServe(":8080", r))
}



// carsListFunc — вспомогательная функция для вывода всех машин.
func carsListFunc() []string {
    var list []string
    for _, c := range cars {
        list = append(list, c)
    }
    return list
}

// carFunc — вспомогательная функция для вывода определённой машины.
func carFunc(id string) string {
    if c, ok := cars[id]; ok {
        return c
    }
    return ""
} 