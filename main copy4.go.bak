package main

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
)

func generateRandom(size int) ([]byte, error) {
     // генерируем случайную последовательность байт
    // определяем слайс нужной длины
    b := make([]byte, size)
    _, err := rand.Read(b) // записываем байты в массив b
    if err != nil {
        fmt.Printf("error: %v\n", err)
        return nil, err
    }
    fmt.Println(hex.EncodeToString(b))
    
    return b, nil
} 

const (
    password = "x35k9f"
    msg      = `0ba7cd8c624345451df4710b81d1a349ce401e61bc7eb704ca` +
        `a84a8cde9f9959699f75d0d1075d676f1fe2eb475cf81f62ef` +
        `f701fee6a433cfd289d231440cf549e40b6c13d8843197a95f` +
        `8639911b7ed39a3aec4dfa9d286095c705e1a825b10a9104c6` +
        `be55d1079e6c6167118ac91318fe`
)

func main() {


    keyfrompass := sha256.Sum256([]byte(password))
  

        fmt.Println(keyfrompass)
        fmt.Println(aes.BlockSize)

        aesblock, err := aes.NewCipher(keyfrompass[:])
        if err != nil {
            fmt.Printf("error: %v\n", err)
            return
        }
    
        aesgcm, err := cipher.NewGCM(aesblock)
        if err != nil {
            fmt.Printf("error: %v\n", err)
            return
        }
            
 
    //nonce := keyfrompass[len(keyfrompass)-aesgcm.NonceSize():]
    nonce := keyfrompass[20:32]
    fmt.Printf("nonce: %v\n", nonce) 
    fmt.Println(len(keyfrompass))
    fmt.Println(aesgcm.NonceSize())

    encrypted, err := hex.DecodeString(msg)
    if err != nil {
        panic(err)
    }

    src2, err := aesgcm.Open(nil, nonce, encrypted, nil) // расшифровываем
    if err != nil {
        fmt.Printf("error Open: %v\n", err)
        return
    }
    fmt.Printf("decrypted: %s\n", src2)

}

